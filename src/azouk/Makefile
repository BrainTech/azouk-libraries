#
# Azouk Libraries -- Libraries and goodies created for www.azouk.com.
# Copyright (C) 2008-2009 Azouk Network Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author:
#      Piotr Findeisen <piotr.findeisen at gmail.com>
#

# The default target of this Makefile is...
all::

# Create build directory if it does not exist.
_ := $(shell test -e build || { mkdir -p ../../build; ln -s ../../build .; })

MAKEFLAGS	+= -r
# Delete the default suffixes (Well, -r does this, but maybe not in all makes.)
.SUFFIXES:
# Keep everything that is generated.
.SECONDARY:
# Remove works-in-progress.
.DELETE_ON_ERROR:

PROGRAMS	:= server mxcontrol
LIBRARIES	:= 
SOURCEDIRS	:= azlib multiplexer mxcontrol-commands azouk
BUILDDIR	:= build

PYTHONFILES	:= $(shell find -name '*.py' | grep -v '\.svn' | sed -e 's@^\./@@' | grep -vE '^$(BUILDDIR)/') multiplexer/__init__.py
TARGETS		:= $(PYTHONFILES) multiplexer/multiplexer_constants.py azouk/logging/type_id_constants.py azouk/release.py
GENERATE_CONSTANTS := build/generate_constants
VERSION_BASH_FILE := /tmp/azouk-release-$(shell whoami).sh

ifeq "$V" ""
Q=@
else
Q=
endif

PYTHON_VERSION	:= 2.5
CXX		:= g++
O		?= -O3
GENERALFLAGS	+= $(O) -Wall -Wnon-virtual-dtor -Winit-self \
    			-Wswitch-enum -Wunused -Wunused-parameter \
			-DBOOST_DISABLE_THREADS \
			-Werror \
			#
CXXFLAGS	+= $(GENERALFLAGS) \
			-I . \
			-I $(BUILDDIR) \
			-I /usr/include/python$(PYTHON_VERSION) \
			-I $(BUILDDIR)/azlib \
			-fPIC \
			#

LDFLAGS		+= $(GENERALFLAGS) \
    			-lprotobuf \
			-lboost_program_options \
			-lboost_signals \
			-lboost_system \
    			#
PYTHONMODULELDFLAGS	:= $(LDFLAGS) -lpython$(PYTHON_VERSION) -ldl -lpthread -lutil -lboost_python \

PROTOC		:= protoc
PROTOCFLAGS	:= 

# protocol buffers (http://code.google.com/apis/protocolbuffers/)
PROTOBUFS_FILES := $(shell find -name '*.proto' | grep -vE '/(\..*|build)' | sed -e 's@^\./@@g')
PROTOBUFS_COMPILATIONS_CC := $(PROTOBUFS_FILES:.proto=.pb.cc)
PROTOBUFS_COMPILATIONS_H := $(PROTOBUFS_FILES:.proto=.pb.h)
PROTOBUFS_COMPILATIONS_PY := $(PROTOBUFS_FILES:.proto=_pb2.py)
TARGETS := $(TARGETS) $(PROTOBUFS_COMPILATIONS_PY)
LIBRARIES := $(LIBRARIES) $(PROTOBUFS_COMPILATIONS_CC:.cc=.o)
LIBRARIES := $(LIBRARIES) $(shell for dir in $(SOURCEDIRS); do find $$dir -name '*.cc' | grep -v '\.svn' | sed -e 's/\.cc$$/.o/g'; done)

PROGRAMS			:= $(addprefix $(BUILDDIR)/,$(PROGRAMS))
TARGETS				:= $(addprefix $(BUILDDIR)/,$(TARGETS))
LIBRARIES			:= $(addprefix $(BUILDDIR)/,$(LIBRARIES))
PROTOBUFS_COMPILATIONS_CC	:= $(addprefix $(BUILDDIR)/,$(PROTOBUFS_COMPILATIONS_CC))
PROTOBUFS_COMPILATIONS_PY	:= $(addprefix $(BUILDDIR)/,$(PROTOBUFS_COMPILATIONS_PY))
PROTOBUFS_COMPILATIONS_H	:= $(addprefix $(BUILDDIR)/,$(PROTOBUFS_COMPILATIONS_H))
LINKLIBRARIES 			:= $(filter-out %module.o, $(LIBRARIES))
PYTHON_COMPILED_MODULES		:= $(patsubst %module.o, %.so, $(filter %module.o, $(LIBRARIES)))
TARGETS += $(PYTHON_COMPILED_MODULES) $(PROGRAMS)

$(VERSION_BASH_FILE):
#	@ echo "This rule shoule be never run." >&2
#	@ echo "The VERSION_HASH_FILE ($(VERSION_HASH_FILE)) should be autogenerated" >&2
#	@ echo "on the Makefile level *before* any rules are run." >&2
#	false
	echo "# version stub generated on `date -R`" > $@
	echo "version=unknown" >> $@
	echo "version_hash=`echo -n 'unknown' | sha1sum - | cut -d' ' -f1`" >> $@
	echo "version_short_hash=`echo -n 'unknown' | sha1sum - | cut -d' ' -f1 | cut --bytes=1-7`" >> $@

$(PROTOBUFS_COMPILATIONS_CC) : $(BUILDDIR)/%.pb.cc : %.proto
	@ echo "Compiling protobufs file '$<' into '$@'"
	$Q mkdir -p `dirname $@`
	$Q rm -f $@
	$Q $(PROTOC) $(PROTOCFLAGS) -I . --cpp_out $(BUILDDIR) $<
	$Q test -f $@
	$Q chmod -x $@ $(patsubst %.cc, %.h, $@)
# alias-like rule
$(PROTOBUFS_COMPILATIONS_H) : %.pb.h : %.pb.cc

$(PROTOBUFS_COMPILATIONS_PY) : $(BUILDDIR)/%_pb2.py : %.proto
	$Q mkdir -p `dirname $@`
	@ echo "Compiling protobufs file '$<' into '$@'"
	$Q rm -f $@
	$Q $(PROTOC) $(PROTOCFLAGS) -I . --python_out $(BUILDDIR) $<
	$Q test -f $@
	$Q chmod -x $@

SOURCE_FILES := $(shell find -name '*.cc' -o -name '*.c' | grep -v '\.svn') $(PROTOBUFS_COMPILATIONS_CC)
SOURCE_FILES := $(shell for i in $(SOURCE_FILES); do echo $$i; done | sed -e 's@^\./@@g')



# handling dependencies
DEPENDECY_FILES := $(shell for i in $(SOURCE_FILES); do echo $(BUILDDIR)/$$i.dep; done | sed -e 's@/\./@/@g' | sed -e 's@^build/build/@build/@g')

$(BUILDDIR)/%.dep: %
	@ echo "Creating dependency file for '$<'"
	$Q mkdir -p `dirname $@`
	$Q $(CXX) $(CXXFLAGS) -MQ $(basename $(basename $@)).o -MQ $@ -MM -MG -MP -o $@ $<
	$Q test -f $@

$(BUILDDIR)/%.dep: $(BUILDDIR)/%
	@ echo "Creating dependency file for '$<' (generated file)"
	$Q $(CXX) $(CXXFLAGS) -MQ $(basename $(basename $@)).o -MQ $@ -MM -MG -MP -o $@ $<
	$Q test -f $@

$(BUILDDIR)/%.dep:
	@ echo "Creating fake dependency file '$@'"
	$Q mkdir -p `dirname $@`
	$Q touch $@

ifneq "$(MAKECMDGOALS)" "clean"
ifneq "$(MAKECMDGOALS)" "sourcechanged"
-include $(DEPENDECY_FILES)
_ := $(shell echo "Updating version file '$(VERSION_BASH_FILE)'" >&2 ; bash ./update-version-bash-file "$(VERSION_BASH_FILE)" >&2 )
endif
endif

$(BUILDDIR)/multiplexer/__init__.py:
	touch $@

# generated header files
$(BUILDDIR)/multiplexer/multiplexer.constants.h $(BUILDDIR)/multiplexer/multiplexer_constants.py: multiplexer.rules $(GENERATE_CONSTANTS)
#	+@ [ "$$(bash -c 'test -t $(GENERATE_CONSTANTS)')" != "" ] || { echo "need ro remake $(GENERATE_CONSTANTS)" >/dev/null; $(MAKE) $(GENERATE_CONSTANTS); }
	$(GENERATE_CONSTANTS) $< $@

$(BUILDDIR)/azouk/release.py: $(VERSION_BASH_FILE)
	@ echo "Updating version file '$@'"
	$Q . $<; \
	{ \
	    echo "version = \"$$version\""; \
	    echo "version_hash = \"$$version_hash\""; \
	    echo "version_short_hash = \"$$version_short_hash\""; \
	} > $@

$(BUILDDIR)/azouk/release.h: $(VERSION_BASH_FILE)
	@ echo "Updating version file '$@'"
	$Q set -e; \
	. $<; \
	file_token=x`echo $@ | sha1sum | awk '{print $$1}'`; \
	{ \
	    echo "#ifndef $$file_token"; \
	    echo "#define $$file_token"; \
	    echo "namespace azouk { namespace release {"; \
	    echo "	const char* const version = \"$$version\";"; \
	    echo "	const char* const version_hash = \"$$version_hash\";"; \
	    echo "	const char* const version_short_hash = \"$$version_short_hash\";"; \
	    echo "} /* release */ } /* azouk */"; \
	    echo "#endif"; \
	} > $@

$(BUILDDIR)/azouk/logging/type_id_constants.py: logging.type_id.constants.txt
	$Q mkdir -p `dirname $@`
	cat $< > $@

$(BUILDDIR)/azouk/logging/type_id_constants.h: logging.type_id.constants.txt
	$Q mkdir -p `dirname $@`
	@ file_token=x`echo $@ | sha1sum | awk '{print $$1}'`; { set -e; \
		echo "#ifndef $$file_token"; \
		echo "#define $$file_token"; \
		echo "namespace `basename $@ .h | tr . _` {"; \
		cat $< | grep -v '^[ 	]*#' | grep -E . | sed -e 's/^\([a-zA-Z_]\+\) *= *\([0-9]\+[lL]\?\)/	static const unsigned int \1 = \2;/'; \
		echo "};"; \
		echo "#endif"; \
	    } > $@ || { rm -f $@; false; }

# copy the python files
$(BUILDDIR)/%.py: %.py
	@ echo "Copying '$@'"
	$Q mkdir -p `dirname $@`
	$Q cp --preserve=mode,ownership -dR $< $@

# compile to object file
$(BUILDDIR)/%.o: %.cc
	@ echo "Compiling '$@'"
	$Q mkdir -p `dirname $@`
	$Q $(CXX) -o $@ $< -c $(CXXFLAGS)

$(BUILDDIR)/%.ii: %.cc
	@ echo "Preprocessing '$@'"
	$Q mkdir -p `dirname $@`
	$Q $(CXX) -o $@ $< -E $(CXXFLAGS)
	$Q echo "// vim:ft=cpp" >> $@

$(BUILDDIR)/%.o: $(BUILDDIR)/%.cc
	@ echo "Compiling '$@'"
	$Q $(CXX) -o $@ $< -c $(CXXFLAGS)

$(BUILDDIR)/%.ii: $(BUILDDIR)/%.cc
	@ echo "Preprocessing '$@'"
	$Q $(CXX) -o $@ $< -E $(CXXFLAGS)
	$Q echo "// vim:ft=cpp" >> $@

$(BUILDDIR)/lib__static_linklibraries.a: $(LINKLIBRARIES)
	@ echo "Packing '$@'"
	$Q ar rsu $@ $^

# shared libraries
$(BUILDDIR)/lib__linklibraries.so : $(LINKLIBRARIES)
# TODO(findepi) compile using lib__static_linklibraries.a
	@ echo "Linking '$@'"
	$Q $(CXX) -o $@ $(LINKLIBRARIES) -shared $(LDFLAGS)

$(filter-out $(BUILDDIR)/azouk/_allinone.so,$(PYTHON_COMPILED_MODULES)) : $(BUILDDIR)/%.so: $(BUILDDIR)/%module.o $(BUILDDIR)/lib__linklibraries.so
# TODO(findepi) use -l option to get dynamic linkage
# 		and determine $(BUILDDIR) absolute path reliably
	@ echo "Creating python module '$@'"
	$Q $(CXX) -o $@ `pwd`/$(BUILDDIR)/lib__linklibraries.so $< -shared $(PYTHONMODULELDFLAGS)

$(BUILDDIR)/azouk/_allinone.so : $(BUILDDIR)/%.so : $(LINKLIBRARIES) \
    		$(BUILDDIR)/multiplexer/_mxclientmodule.o \
		$(BUILDDIR)/azouk/_loggingmodule.o \
		$(BUILDDIR)/%module.o
	@ echo "Creating python module '$@' with all libraries linked in"
	$Q $(CXX) -o $@ $^ -shared $(PYTHONMODULELDFLAGS)

$(BUILDDIR)/%.so: $(BUILDDIR)/%.o $(BUILDDIR)/lib__linklibraries.so
	@ echo "Creating '$@'"
	$Q $(CXX) -o $@ `pwd`/$(BUILDDIR)/lib__linklibraries.so $< -shared $(LDFLAGS)

# linking programs
$(PROGRAMS) : % : %.o $(BUILDDIR)/lib__static_linklibraries.a
	@ echo "Linking '$@'"
	$Q $(CXX) -o $@ $< $(LDFLAGS) $(LINKLIBRARIES)
#	$Q $(CXX) -o $@ $< $(LDFLAGS) $(BUILDDIR)/lib__static_linklibraries.a

$(GENERATE_CONSTANTS) : % : $(BUILDDIR)/multiplexer/Multiplexer.pb.o \
    $(BUILDDIR)/azlib/logging/Logging.pb.o \
    $(BUILDDIR)/azlib/util/Exception.o \
    $(BUILDDIR)/azlib/util/Assert.o \
    %.o
	@ echo "Linking '$@'"
	$Q $(CXX) -o $@ $^ $(LDFLAGS)




# all, clean & other meta rules
all:: $(TARGETS)
clean:
	- find -H $(BUILDDIR) -mindepth 1 -maxdepth 1 ! -name .gitignore | xargs rm -vrf
	- rm -f $(VERSION_BASH_FILE) $(VERSION_BASH_FILE).tmp

.PHONY: all clean default

sourcechanged: Makefile $(shell find -regextype posix-egrep -iregex '.*\.(cc|c|cpp|h|proto|py|rules)' | grep -vE '\.svn|build')
	@ touch $@

